use std::collections::HashMap;

fn main() {
    let input = std::fs::read_to_string("input.txt").unwrap();

    println!("Part 1: {}", part1(&input));
}

fn part1(input: &str) -> usize {
    let parts: Vec<&str> = input.split("\n\n").collect();
    let patterns = extract_patterns(parts[0]);

    let s = parts[1].lines().filter(|line| {

        let head = line.chars().next().unwrap();
        let patterns = match patterns.get(&head) {
            Some(values) => values.iter().filter(|v| line.starts_with(&v)).collect::<Vec<_>>(),
            None => todo!(),
        }
        
        println!("{head}");

        true
    }).collect::<Vec<_>>();

    println!("{:?}", s);
    2
}

fn extract_patterns(input: &str) -> HashMap<char, Vec<String>> {
    input.split(", ").fold(HashMap::new(), |mut acc, curr| {
        acc.entry(curr.chars().next().unwrap())
            .and_modify(|e| e.push(curr.to_string()))
            .or_insert(vec![curr.to_string()]);
        acc
    })
}
